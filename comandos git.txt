git init ------------------------------------------------->crea un repositorio en la carpeta que está
git init primer_repo(nombre de carpeta a crear)----------->iniciar un repositorio con el nombre de la carpeta que se asigne
touch archivo.txt ---------------------------------------->crear un archivo
Vim archivo.txt ------------------------------------------>editar un archivo con Vim
mkdir segundo_repo --------------------------------------->crear una carpeta
clear ---------------------------------------------------->limpiar la pantalla
rm -rf .git ---------------------------------------------->borra el repositorio .git de la carpeta
git status ----------------------------------------------->verifica si el archivo esta en working directory o no
git add (nombre del archivo)------------------------------>añade el archivo al staging a espera del commit
git rm --cached (nombre del archivo) --------------------->quita el archivo del stage
git add -A ----------------------------------------------->añade todos los rchivos que estan en working a stage
git rm -f 'nombre el archivo'----------------------------->forzar el borrado de un archivo del working
git commit -m 'inicializar nuestro landing' -------------->añade el archivo al repositorio git con un mensaje 
git commit --amend --------------------------------------->concatenar un cambio prebio con uno nuevo, un commit con otro. con -m sobre escribe el mensaje anterior
git log -------------------------------------------------->revisar el log
git tag -a(versión anotada) 0.5(versión) -m 'version estable del proyecto'->crea un tag o etiqueta con la versión  y los cambios del archivo
git tag -l ----------------------------------------------->lista los tag hechos
git tag 0.3 8db33108...(id del commit hecho)-------------->crear una etiqueta de un commit anterior
git tag -f(comando para renombrar) -a 0.1 -m 'iniciando proyecyo' 8db33108...(id del commit hecho)-->renombrar un tag
git tag -d 1.0 ------------------------------------------->borra una etiqueta específica
git log --oneline ---------------------------------------->resume log en pocas lineas
git log --oneline --graph -------------------------------->gráfico de como va avanzando la historia de mi proyecto
git log -3 ----------------------------------------------->log de los últimos 3 commits
git log -1 ----------------------------------------------->log del último commit
git diff 8db33108...(id del commit hecho) ---------------->muestra los cambios hechos en ese commit
git diff 8db33108 5cd46758jsk90 -------------------------->compara los cambios hechos entre dos commits. dependen del orden
git reset (--soft --mixed --hard)------------------------->los parametros
git reset --soft 8db33108--------------------------------->quita los cambios hechos en un commit pero deja los archivos en stage
git reset --mixed 8db33108 ------------------------------->quita los cambios del commit y envia los archivos al working directory
git reset --hard 8db33108 -------------------------------->borra todo lo que se encuentre en el repositorio o el stage
git config --global core.editor vim----------------------->editor de texto vim
git config --global core.editor "'C:\Program Files\Sublime Text 3\sublime_text.exe' --wait" ---->otro editor dde texto
------o-------------o---------o-----------------o-----------------o-------------------
trabajos con ramas
------o-------------o---------o-----------------o-----------------o-------------------
git branch responsive-------------------------------------->crear una rama
git branch -l --------------------------------------------->listar las ramas
git branch -d x ------------------------------------------->borrar una rama
git branch -m (nombre de la rama a renombrar) (nuevo nombre) -->renombrar una rama
git checkout [nombre de la rama] -------------------------->cambiar entre ramas
git checkout [id del commit]------------------------------->ir a un commit específico y poder crear una rama desde ese commit
git checkout -b nueva-imagen------------------------------->crea una nueva rama y salta a ella
git merge [nombre de la rama que se quiere mezclar en la rama principal] --> debe estar en la rama principal o a la que se quiera mezclar
git checkout -b updateA ----------------------------------->crear una nueva rama y salta a ella
git rebase updateA ---------------------------------------->reescribir la historia de los commit hasta un cierto punto elegido
git rebase -i updateA -------------------------------------> rebase interactivo
git stash -------------------------------------------------> guarda todos los cambios hechos en un estado intermedio
git stash list --------------------------------------------> lista todos los cambios guardados
git stash apply ------------------------------------------->aplica el ultimo cambio que guardamos
git stash apply stash@{0} --------------------------------->aplicar un cambio específico guardado
git checkout -- index.html -------------------------------->quitar los cambios hechos a un archivo
git cherry-pick 90cbad8(id del commit hecho) ----------------------------------->pasar un commit que se hizo en una rama equivocada a la correcta